import os
import asyncio
import openai
import asyncpg
from aiogram import Bot, Dispatcher, types
from aiogram.types import Message
from aiogram.filters import CommandStart
from dotenv import load_dotenv
from aiogram import Router

from service import (get_weather, get_joke, get_currency_rates, movies)
import keyboards as kb

load_dotenv()

TOKEN = os.getenv("TOKEN")
OPEN_AI_CHAT_KEY = os.getenv("OPEN_AI_CHAT_KEY")

bot = Bot(token=TOKEN)
dp = Dispatcher()
router = Router()

user_surveys = {}

questions = [
    "–ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç?",
    "–°–∫–æ–ª—å–∫–æ –≤–∞–º –ª–µ—Ç?",
    "–ö–∞–∫–æ–π –≤–∞—à –ª—é–±–∏–º—ã–π —à–∫–æ–ª—å–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç?",
    "–ö–∞–∫–æ–π –≤–∞—à –ª—é–±–∏–º—ã–π —Ü–≤–µ—Ç?",
    "–ö–∞–∫–æ–π –≤–∞—à –ª—é–±–∏–º—ã–π —Ñ–∏–ª—å–º?",
    "–ö–∞–∫–æ–µ –≤–∞—à–µ —Ö–æ–±–±–∏?",
    "–ö–∞–∫–æ–µ –≤–∞—à–µ –ª—é–±–∏–º–æ–µ –∂–∏–≤–æ—Ç–Ω–æ–µ?",
    "–ö–∞–∫–æ–µ –≤–∞—à–µ –ª—é–±–∏–º–æ–µ –≤—Ä–µ–º—è –≥–æ–¥–∞?"
]


async def create_pool():
    return await asyncpg.create_pool(
        user=os.getenv('DB_USER'),
        password=os.getenv('DB_PASSWORD'),
        database=os.getenv('DB_NAME'),
        host=os.getenv('DB_HOST')
    )


@dp.message(CommandStart())
async def start(message: types.Message):
    await message.answer(f"–ü—Ä–∏–≤–µ—Ç {message.from_user.first_name or message.from_user.username}, –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑ –º–µ–Ω—é",
                         reply_markup=kb.reply_menu)


@dp.message()
async def text_handler(message: Message):
    chat_id = message.chat.id

    if chat_id in user_surveys:
        await survey_handler(message)
        return

    if message.text == "üí° –ö–∞—Ä—Ç–∏–Ω–∫–∞":
        await message.answer('–ö–∞–∫—É—é –∫–∞—Ä—Ç–∏–Ω–∫—É –≤—ã —Ö–æ—Ç–∏—Ç–µ?', reply_markup=kb.inline_image)
    elif message.text == "üèû –ü–æ–≥–æ–¥–∞":
        weather = await get_weather()
        await message.answer(weather)
    elif message.text == 'üí° –ö—É—Ä—Å –≤–∞–ª—é—Ç':
        course = await get_currency_rates()
        await message.answer(course)
    elif message.text == 'üèû –°–ø–∏—Å–æ–∫ —Ñ–∏–ª—å–º–æ–≤':
        await message.answer(movies)
    elif message.text == 'üí° –®—É—Ç–∫–∞':
        joke = await get_joke()
        await message.answer(joke)
    elif message.text == 'üèû –ü—Ä–æ–π—Ç–∏ –æ–ø—Ä–æ—Å':
        await start_survey(message)
    elif message.text == 'üí° –ß–∞—Ç —Å –ò–ò':
        await message.answer('–ó–∞–¥–∞–≤–∞–π—Ç–µ –ª—é–±–æ–π –≤–æ–ø—Ä–æ—Å, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π –≤–∞–º –æ—Ç–≤–µ—Ç–∏—Ç –ò–ò.')
    else:
        await chat_with_ai(message)


async def start_survey(message: types.Message):
    chat_id = message.chat.id
    user_surveys[chat_id] = {'answers': []}
    await message.answer(questions[0])


async def survey_handler(message: types.Message):
    chat_id = message.chat.id

    if chat_id in user_surveys:
        user_surveys[chat_id]['answers'].append(message.text)
        q_index = len(user_surveys[chat_id]['answers'])

        if q_index < len(questions):
            await message.answer(questions[q_index])
        else:
            pool = dp['db']
            async with pool.acquire() as conn:
                await conn.execute(
                    'INSERT INTO surveys (user_id, answers) VALUES ($1, $2)',
                    message.from_user.id,
                    user_surveys[chat_id]['answers']
                )
            await message.answer("–°–ø–∞—Å–∏–±–æ –∑–∞ —É—á–∞—Å—Ç–∏–µ –≤ –æ–ø—Ä–æ—Å–µ!")
            del user_surveys[chat_id]


@dp.callback_query()
async def callback_query_handler(call: types.CallbackQuery):
    if call.data == "boxing":
        await call.message.answer_photo('https://avatars.mds.yandex.net/i?id=4ec58c567c030197f345986850e2dee9_l-10805535-images-thumbs&n=13')
    elif call.data == 'football':
        await call.message.answer_photo('https://i.cdn.newsbytesapp.com/images/l3420250312041648.jpeg')
    elif call.data == 'basketball':
        await call.message.answer_photo('https://avatars.mds.yandex.net/i?id=35c3668628f22806c28c3d7785ebaa14_l-8770658-images-thumbs&n=13')


async def chat_with_ai(message: Message):
    try:
        print("–°—Ç–∞—Ä—Ç")

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è OpenAI —Å API –∫–ª—é—á–æ–º
        openai.api_key = OPEN_AI_CHAT_KEY

        # –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –∫ OpenAI
        completion = openai.ChatCompletion.create(
            model="gpt-3.5-turbo",  # –í—ã –º–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –º–æ–¥–µ–ª—å, –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ
            messages=[
                {
                    "role": "user",
                    "content": message.text
                }
            ]
        )

        # –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç OpenAI
        r = completion['choices'][0]['message']['content']
        await message.answer(r)

    except Exception as e:
        print(e)
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—â–µ–Ω–∏–∏ —Å –ò–ò.")


async def main():
    pool = await create_pool()
    dp['db'] = pool
    try:
        await dp.start_polling(bot)
    finally:
        await bot.session.close()
        await pool.close()


if __name__ == '__main__':
    print("Starting bot...")
    asyncio.run(main())
