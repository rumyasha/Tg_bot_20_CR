import os

from aiogram.client.session import aiohttp
from aiogram.types import Message
from dotenv import load_dotenv
from deep_translator import GoogleTranslator
import openai

import aiohttp
import xml.etree.ElementTree as ET
load_dotenv()

WEATHER_API_KEY=os.getenv('WEATHER_API_KEY')

OPEN_AI_CHAT_KEY = os.getenv('OPEN_AI_CHAT_KEY')


#üèû –ü–æ–≥–æ–¥–∞
async def get_weather():
    url = f"https://api.openweathermap.org/data/2.5/weather?q=–ë–∏—à–∫–µ–∫&appid={WEATHER_API_KEY}&units=metric"
    async with aiohttp.ClientSession() as session:
        async with session.get(url) as response:
            if response.status == 200:
                data = await response.json()
                type_ = data["weather"][0]["main"]
                temp_c = data["main"]["temp"]
                feels_like = data["main"]["feels_like"]
                city = data["name"]
                return f"–ü–æ–≥–æ–¥–∞ –≤ –≥–æ—Ä–æ–¥–µ {city}:{type_}\n –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞:{temp_c}\n –ß—É–≤—Å—Ç–≤—É–µ—Ç—Å—è –∫–∞–∫:{feels_like}"
            else:
                return f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞"


#üí° –ö—É—Ä—Å –≤–∞–ª—é—Ç

async def get_currency_rates():
    url = "https://www.nbkr.kg/XML/daily.xml"

    async with aiohttp.ClientSession() as session:
        async with session.get(url) as response:
            if response.status == 200:
                xml_data = await response.text()
                root = ET.fromstring(xml_data)

                rates = {}

                for currency in root.findall('Currency'):
                    iso_code = currency.get('ISOCode')
                    value_element = currency.find('Value')


                    if iso_code and value_element is not None:
                        rate = value_element.text
                        rates[iso_code] = rate


                usd = rates.get("USD", "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö")
                eur = rates.get("EUR", "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö")
                rub = rates.get("RUB", "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö")
                kzt = rates.get("KZT", "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö")
                cny = rates.get("CNY", "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö")

                return (f"üí∞ –û—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–µ –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç –≤ –ö—ã—Ä–≥—ã–∑—Å—Ç–∞–Ω–µ:\n"
                        f"üá∫üá∏ USD: {usd} KGS\n"
                        f"üá™üá∫ EUR: {eur} KGS\n"
                        f"üá∑üá∫ RUB: {rub} KGS\n"
                        f"üá∞üáø KZT: {kzt} KGS\n"
                        f"üá®üá≥ CNY: {cny} KGS")
            else:
                return f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –¥–∞–Ω–Ω—ã—Ö: {response.status}"


#üèû –°–ø–∏—Å–æ–∫ —Ñ–∏–ª—å–º–æ–≤
movies = """1. –ü–æ–±–µ–≥ –∏–∑ –®–æ—É—à–µ–Ω–∫–∞ (1994)
2. –ö—Ä–µ—Å—Ç–Ω—ã–π –æ—Ç–µ—Ü (1972)
3. –ö—Ä–µ—Å—Ç–Ω—ã–π –æ—Ç–µ—Ü 2 (1974)
4. –¢–µ–º–Ω—ã–π —Ä—ã—Ü–∞—Ä—å (2008)
5. –ö—Ä–∏–º–∏–Ω–∞–ª—å–Ω–æ–µ —á—Ç–∏–≤–æ (1994)
6. –ë–æ–π—Ü–æ–≤—Å–∫–∏–π –∫–ª—É–± (1999)
7. –§–æ—Ä—Ä–µ—Å—Ç –ì–∞–º–ø (1994)
8. –ù–∞—á–∞–ª–æ (2010)
9. –ú–∞—Ç—Ä–∏—Ü–∞ (1999)
10. –ó–µ–ª–µ–Ω–∞—è –º–∏–ª—è (1999)
11. –ò–Ω—Ç–µ—Ä—Å—Ç–µ–ª–ª–∞—Ä (2014)
12. –°–ø–∏—Å–æ–∫ –®–∏–Ω–¥–ª–µ—Ä–∞ (1993)
13. –ü–∞—Ä–∫ —é—Ä—Å–∫–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞ (1993)
14. –ì–ª–∞–¥–∏–∞—Ç–æ—Ä (2000)
15. –í–ª–∞—Å—Ç–µ–ª–∏–Ω –∫–æ–ª–µ—Ü: –ë—Ä–∞—Ç—Å—Ç–≤–æ –∫–æ–ª—å—Ü–∞ (2001)
16. –í–ª–∞—Å—Ç–µ–ª–∏–Ω –∫–æ–ª–µ—Ü: –î–≤–µ –∫—Ä–µ–ø–æ—Å—Ç–∏ (2002)
17. –í–ª–∞—Å—Ç–µ–ª–∏–Ω –∫–æ–ª–µ—Ü: –í–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –∫–æ—Ä–æ–ª—è (2003)
18. –ó–≤–µ–∑–¥–Ω—ã–µ –≤–æ–π–Ω—ã: –ò–º–ø–µ—Ä–∏—è –Ω–∞–Ω–æ—Å–∏—Ç –æ—Ç–≤–µ—Ç–Ω—ã–π —É–¥–∞—Ä (1980)
19. –û–¥–Ω–∞–∂–¥—ã –≤ –ì–æ–ª–ª–∏–≤—É–¥–µ (2019)
20. –î–æ—Å—Ç—É—á–∞—Ç—å—Å—è –¥–æ –Ω–µ–±–µ—Å (1997)
21. –î–∂–∞–Ω–≥–æ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–Ω—ã–π (2012)
22. –í–µ–ª–∏–∫–∏–π –ì—ç—Ç—Å–±–∏ (2013)
23. –û–ø–µ—Ä–∞—Ü–∏—è ¬´–´¬ª –∏ –¥—Ä—É–≥–∏–µ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏—è –®—É—Ä–∏–∫–∞ (1965)
24. –ë—Ä–∞—Ç (1997)
25. –ë—Ä–∞—Ç 2 (2000)
26. –î–∂–µ–Ω—Ç–ª—å–º–µ–Ω—ã (2019)
27. –ö–∞—Ä—Ç—ã, –¥–µ–Ω—å–≥–∏, –¥–≤–∞ —Å—Ç–≤–æ–ª–∞ (1998)
28. –ë–æ–ª—å—à–æ–π –∫—É—à (2000)
29. –õ–µ–æ–Ω (1994)
30. –†–µ–∫–≤–∏–µ–º –ø–æ –º–µ—á—Ç–µ (2000)
31. –¢–∞–∫—Å–∏—Å—Ç (1976)
32. –û—Å—Ç—Ä–æ–≤ –ø—Ä–æ–∫–ª—è—Ç—ã—Ö (2010)
33. –•—Ä–∞–±—Ä–æ–µ —Å–µ—Ä–¥—Ü–µ (1995)
34. –ü–∏—Ä–∞—Ç—ã –ö–∞—Ä–∏–±—Å–∫–æ–≥–æ –º–æ—Ä—è: –ü—Ä–æ–∫–ª—è—Ç–∏–µ –ß–µ—Ä–Ω–æ–π –∂–µ–º—á—É–∂–∏–Ω—ã (2003)
35. –ò—Å–∫—É–ø–ª–µ–Ω–∏–µ (2007)
36. –®–µ—Å—Ç–æ–µ —á—É–≤—Å—Ç–≤–æ (1999)
37. –û–¥–Ω–∞–∂–¥—ã –≤ –ê–º–µ—Ä–∏–∫–µ (1984)
38. –î–æ—Å—Ç–∞—Ç—å –Ω–æ–∂–∏ (2019)
39. –û–Ω–æ (2017)
40. –¢–∏—Ç–∞–Ω–∏–∫ (1997)"""

#üí° –®—É—Ç–∫–∞
async def get_joke():
    url = "https://v2.jokeapi.dev/joke/Any"
    async with aiohttp.ClientSession() as session:
        async with session.get(url) as response:
            if response.status == 200:
                data = await response.json()
                if data["type"] == "single":
                    joke = data["joke"]
                else:
                    joke = f"{data['setup']}\n{data['delivery']}"

                translated_joke = GoogleTranslator(source="auto", target="ru").translate(joke)
                return translated_joke
            else:
                return "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —à—É—Ç–∫–∏ üò¢"

#OpenAi
async def chat_with_ai(message: Message):
    try:
        print("–°—Ç–∞—Ä—Ç")
        client = openai(
        base_url="https://openrouter.ai/api/v1",
        api_key=f"{OPEN_AI_CHAT_KEY}",
        )

        completion = client.chat.completions.create(
        model="open-r1/olympiccoder-32b:free",
        messages=[
            {
            "role": "user",
            "content": message.text
            }
        ]
        )
        r = completion.choices[0].message.content
        await message.answer(r)
    except Exception as e:
        print(e)
